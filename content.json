[{"title":"基于网易云信sdk的Flutter聊天脚手架","date":"2020-04-25T08:26:11.000Z","path":"2020/04/25/基于网易云信sdk的Flutter聊天脚手架/","text":"flutter_server_client基于网易云信sdk的Flutter聊天脚手架,主要对网易云信在Android和iOS原生端的聊天api进行了封装，对Android和iOS消息体的不同差异在Flutter端进行了抹平操作，实现了登录、获取最近聊天会话、会话监听、聊天消息监听、onKick被踢单点登录监听，普通文本、emoji、图片、语音的发送和接受、自定义消息的解析和展示、以及历史聊天记录获取等功能，只需简单在iOS端和Flutter端配置一下appkey就可直接账号登录查看，是一个开箱即用的Flutter聊天脚手架； key修改地方 iOS效果图 Android效果图 项目地址flutter_server_client","tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://bozaigao.github.io/tags/Flutter/"},{"name":"网易云信","slug":"网易云信","permalink":"http://bozaigao.github.io/tags/%E7%BD%91%E6%98%93%E4%BA%91%E4%BF%A1/"},{"name":"聊天","slug":"聊天","permalink":"http://bozaigao.github.io/tags/%E8%81%8A%E5%A4%A9/"}]},{"title":"fish-redux-demo基于fish-redux的Flutter脚手架","date":"2020-01-28T14:11:37.000Z","path":"2020/01/28/fish-redux-demo基于fish-redux的Flutter脚手架/","text":"fish-redux-demo一个基于fish-redux的Flutter脚手架，包含基本的屏幕适配、全局toast提示、网络请求封装、路由框架集成、网络图片缓存，实现了在fish-redux框架下fluro路由框架的集成、演示了Flutter和WebView的双向通信，实现了在fish-redux模式下的页面跳转传参以及实现AutomaticKeepAliveClientMixin，以及实现了父组件和子组件局部数据和页面之间全局数据共享逻辑，是一个开箱即用不可多得的Flutter项目脚手架。 效果图如下 项目地址fish-redux-demo 出于业务安全考虑，Android和iOS原生端的加密公钥已经被抹掉请直接下载Android release 安装包进行体验，账号:11211110085 密码:123456Taro适配rn、h5、微信小程序友情链接Taro-demo","tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://bozaigao.github.io/tags/Flutter/"},{"name":"fish-redux","slug":"fish-redux","permalink":"http://bozaigao.github.io/tags/fish-redux/"},{"name":"Android","slug":"Android","permalink":"http://bozaigao.github.io/tags/Android/"},{"name":"iOS","slug":"iOS","permalink":"http://bozaigao.github.io/tags/iOS/"}]},{"title":"github上能找到的taro适配Android、iOS、微信小程序、H5最佳实践项目脚手架","date":"2019-12-30T03:55:17.000Z","path":"2019/12/30/github上能找到的taro适配Android、iOS、微信小程序、H5最佳实践项目脚手架/","text":"Taro-demogithub上能找到的taro适配Android、iOS、微信小程序、H5最佳实践,主要涉及到了基础网络请求的封装、适配了多端的SafeArea安全区域、style工具样式引用替换scss的繁琐写法大幅度简化代码,同时解决了scss样式无法通过className进行属性传递的问题、自定义tabBar、全局模态对话框展示(解决了微信小程序端不能覆盖底部tabBar的问题)、展示了相同组件多端适配引用的方式、多端样式布局通过styleAssign注入flex、column、relative的方式实现统一化、演示了app的消息通信,通过mock数据在本地搭建服务进行前后端分离开发、本脚手架各端适配的比较完美适合用来进行全新项目的多端开发,后续基础组件持续完善中,目标是打造一个多端共用的基础组件库. 适配进度 H5 – 完美适配 React Native – 完美适配 微信小程序 – 完美适配 目标功能 打造一个多端共用的基础组件库 – 持续开发完善中 样式转化12345678.home__search__top &#123; display: flex; flex-direction: row; align-items: center; background: white; margin-left: 20px; margin-right: 20px;&#125; 将上述scss写法替换为以下写法,简化布局代码,同时解决了scss样式无法通过className进行属性传递的问题 1style=&#123;styleAssign([styles.udr,styles.uac,bgColor('white'),ml(20),mr(20)]&#125; 技术栈typescript+eslint+redux+taro+react-native+mock 用法直接clone本项目进入项目根目录执行npm install操作,然后将third_changes对应目录里面的修改项替换项目根目录node_modules里面对应的组件,react-native原生端壳子Taro-demo-rn-shell.更多官方组件使用请移步京东Taro官方文档、微信小程序官方文档 先打开本地mock服务命令:npm run mock rn端运行命令:npm run dev:rm h5端运行命令:npm run dev:h5 微信小程序端运行命令:npm run dev:weapp 多端适配效果图 项目地址:https://github.com/bozaigao/Taro-demo","tags":[{"name":"react-native","slug":"react-native","permalink":"http://bozaigao.github.io/tags/react-native/"},{"name":"大前端","slug":"大前端","permalink":"http://bozaigao.github.io/tags/%E5%A4%A7%E5%89%8D%E7%AB%AF/"},{"name":"Taro","slug":"Taro","permalink":"http://bozaigao.github.io/tags/Taro/"},{"name":"微信小程序","slug":"微信小程序","permalink":"http://bozaigao.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"H5","slug":"H5","permalink":"http://bozaigao.github.io/tags/H5/"}]},{"title":"解决Flutter项目运行报library not found for -libstdc++.6.0.9问题","date":"2019-12-30T03:39:22.000Z","path":"2019/12/30/解决Flutter项目运行报library-not-found-for-libstdc-6-0-9问题/","text":"在运行Flutter项目的时候由于里面第三方库引用了libstdc++.6.0.9这个库文件而导致项目运行报错问题，苹果在XCode10和iOS12中移除了libstdc++这个库，由libc++这个库取而代之，苹果的解释是libstdc++已经标记为废弃有5年了，建议大家使用经过了llvm优化过并且全面支持C++11的libc++库。 临时解决方法:将-libstdc++.6.0.9库文件导入xcode库文件，两个位置，一套是模拟器的，一套是设备的/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS12.0.sdk/usr/lib//Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib/-libstdc++.6.0.9下载地址:https://www.bozaigao.net/assets/libstdc++.6.0.9.tbd","tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://bozaigao.github.io/tags/Flutter/"},{"name":"libstdc++.6.0.9","slug":"libstdc-6-0-9","permalink":"http://bozaigao.github.io/tags/libstdc-6-0-9/"}]},{"title":"react-native使用chrome调试WebView","date":"2019-12-25T00:31:29.000Z","path":"2019/12/25/react-native使用chrome调试WebView/","text":"react-native使用chrome调试WebView 如果使用的是google模拟器则直接在chrome浏览器输入:chrome://inspect直接进行调试，如果是Android真机则需要去chrome应用商店安装ADB Plugin插件； chrome应用商店下载插件需要翻墙，搭建教程：http://bozaigao.github.io/2019/11/07/使用阿里云ECS结合Shadowsocks搭建自己的专属翻墙梯子/","tags":[{"name":"react-native","slug":"react-native","permalink":"http://bozaigao.github.io/tags/react-native/"},{"name":"性能优化","slug":"性能优化","permalink":"http://bozaigao.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"}]},{"title":"react-native热更新服务搭建","date":"2019-11-20T02:39:04.000Z","path":"2019/11/20/react-native热更新服务搭建/","text":"前言为了实现react-native项目的版本增量静默更新需求，需要使用热更新服务，之前用过微软的code-push更新服务，但是由于微软的Azure服务器是在国外，国内访问网速慢且不稳定，于是需要在公司阿里云的ECS上搭建自己的热更新服务. 热更新服务下载与文件修改 下载地址:https://github.com/lisong/code-push-server 然后主要是修改config/config.js 文件里里面的热更新包储存路径和下载基地址,最后将代码通过能够过ftp或者scp命令上传到服务端. config.js12345678910111213141516171819 db: &#123; username: process.env.RDS_USERNAME || \"root\", password: process.env.RDS_PASSWORD || null, database: process.env.DATA_BASE || \"codepush\", host: process.env.RDS_HOST || \"127.0.0.1\", port: process.env.RDS_PORT || 3306, dialect: \"mysql\", logging: false, operatorsAliases: false, &#125;, ...local: &#123; // Binary files storage dir, Do not use tmpdir and it's public download dir. storageDir: process.env.STORAGE_DIR || \"/codepush\", // Binary files download host address which Code Push Server listen to. the files storage in storageDir. downloadUrl: process.env.LOCAL_DOWNLOAD_URL || \"http://your_server_addrss:3000/download\", // public static download spacename. public: '/download' &#125; 服务端数据库配置 在服务器创建codepush数据库，然后use codepush选择数据库，执行source codepush-all.sql(在code-psuh-server sql目录下) 命令创建数据库表和字段. 启动热更新服务 先确保服务端安装好了node等环境，然后进入code-push-server目录执行npm install安装第三方依赖. 执行npm install -g forever安装forever插件，在项目目录执行 forever start ./bin/www来持久化热更新服务 forever作为node服务的守护进程，可以自动重启node服务，保证服务稳定运行","tags":[{"name":"热更新","slug":"热更新","permalink":"http://bozaigao.github.io/tags/%E7%83%AD%E6%9B%B4%E6%96%B0/"},{"name":"code-push-server","slug":"code-push-server","permalink":"http://bozaigao.github.io/tags/code-push-server/"}]},{"title":"使用阿里云ECS结合Shadowsocks搭建自己的专属翻墙梯子(Mac和iphone环境搭建)","date":"2019-11-07T08:10:04.000Z","path":"2019/11/07/使用阿里云ECS结合Shadowsocks搭建自己的专属翻墙梯子/","text":"前言 之前一用过Netfits、EasySSR、VyprVPN等一些第三方付费服务翻墙软件，但是自从国内政府严打VPN后陆陆续续翻墙的一些服务出现连接慢、网络延迟高、甚至服务直接不可用等状态，但是作为一名搞it的经常翻看国外技术文章的码农来说怎么能没有一款趁手的科学上网工具呢，由于第三方服务经常因为政策原因而变得不稳定，于是决定自己搭建一个翻墙工具。 1. 服务器端配置1.1 境外服务器或ECS(只要不在大陆就可以了，阿里云、腾讯云、aws等云服务商都提供此类服务，我自己购买的是阿里云香港的服务器) 如果服务器只是用来翻墙查下资料或者部署下个人博客的话选择最低配的，带宽选1M的足够使用。 1.2 服务端安装python版本的Shadowsocks 先安装pip git bash12curl \"https://bootstrap.pypa.io/get-pip.py\" -o \"get-pip.py\"python get-pip.py 再通过pip安装Shadowsocks git bash12pip install --upgrade pippip install shadowsocks 创建Shadowsocks配置文件 12vi /etc/shadowsocks.jsonvi shadowsocks.json 配置文件内容如下： shadowsocks.json123456789&#123; \"server\":\"0.0.0.0\", --服务器IP，直接用0.0.0.0 \"server_port\":8888, --端口端口 \"local_address\": \"127.0.0.1\", --本地地址 \"local_port\":1080, --本地端口 \"password\":\"password\", --密码 \"timeout\":300, --超时时间 \"method\":\"aes-256-cfb\", --加密策略，有多重策略，具体自查&#125; 如果你想配置多个登录账号，可以进行如下配置： shadowsocks.json12345678910111213&#123; \"server\":\"0.0.0.0\", --服务器IP，直接用0.0.0.0 \"port_password\":&#123; \"8381\": \"password1\", \"8382\": \"password2\", \"8383\": \"password3\", \"8384\": \"password4\" &#125;, \"local_address\": \"127.0.0.1\", --本地地址 \"local_port\":1080, --本地端口 \"timeout\":300, --超时时间 \"method\":\"aes-256-cfb\", --加密策略，有多重策略，具体自查&#125; 注意：如果取成系统端口会导致服务启动失败 端口号一定不要随便取，如果取成了系统端口比如443会导致端口被占用从而导致服务启动失败 1.3 启动Shadowsocks服务 123456#启动ssserver -c /etc/shadowsocks.json -d start#停止ssserver -c /etc/shadowsocks.json -d stop#重启ssserver -c /etc/shadowsocks.json -d restart 如果发现Shadowsocks客户端一直连不上请到/var/log/shadowsocks.log查看服务报错日志，根据报错信息解决问题. 1.4 阿里云配置服务器安全入网策略 出网策略不用配置，安全组出方向默认允许所有访问，即从安全组内ECS访问外部都是放行的。 2. 本地电脑客户端配置2.1 Shadowsocks客户端下载 下载地址：https://github.com/shadowsocks/ShadowsocksX-NG/releases/ 2.2 安装压缩文件中直接就是Mac的app程序，解压后移动到Mac程序目录即可； 2.3 配置 3. 翻墙效果 Shadowsocks有PAC模式和全局模式:PAC模式：也就是智能分流模式，根据规则去匹配你访问的网站，国外网站走代理，国内网站不走代理；全局模式：国内、国外所有网站都走代理；我一般默认开PAC模式，这样加载国内网站速度会比较快，遇到网站加载很慢再开全局模式进行访问。注意：如果服务运行一段时间突然发现翻不了墙了，可能是阿里云那边做了限制，重新配置新的端口安全策略再重启Shadowsocks服务即可。 4. iphone安装Shadowrocketappstore中国区由于政策原因已经下架，直接登录美区账号搜索下载账号:4ssgit@Gmail.com 密码:V2Server如果登录失败请参考以下链接:https://shadowsockshelp.github.io/Shadowsocks/appleid.html进入Shadowrocket主界面后在首页点击添加服务器节点然后输入ip、端口号、加密方式和连接密码即可，配置以及登录twitter效果如下： 切记一定不要登录iCloud账号只需要登录appstore账号就可以了，不然手机被账号拥有者恶意锁定的话就无法解锁了。","tags":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://bozaigao.github.io/tags/Shadowsocks/"},{"name":"VPN","slug":"VPN","permalink":"http://bozaigao.github.io/tags/VPN/"},{"name":"翻墙","slug":"翻墙","permalink":"http://bozaigao.github.io/tags/%E7%BF%BB%E5%A2%99/"}]},{"title":"react-native版本升级","date":"2019-09-07T01:57:33.000Z","path":"2019/09/07/react-native版本升级/","text":"1. rn版本从0.51.0升级到0.60.4升级目的：rn从0.60.2引入了Hermes 新的js引擎，新的引擎从字节码预编译、无JIT、新的垃圾回收策略等优化了Android端apk大小，减少了内存使用，页面切换的帧率也比之前有了提高,本次分享的主题主要是解决在版本升级过程中遇到的问题。 2. 准备工作项目备份,初始化0.64.0版本的对应项目,保证初始化新项目iOS pod install、android 在target=0.28.0 clean rebuild正常运行,确保环境版本没问题,有问题的话直接查询react-native issue保证项目纯净，能正常运行; 3. js项目端升级 按照官方建议升级步骤,进入要升级的项目先执行react-native-git-upgare脚本自动升级命令,执行该命令会自动覆盖文件,一定记得要备份原项目,然后静静地等待升级完成,如果无法识别该命令,请先执行npm install react-native-git-upgare -g,结果升级中途报错无奈只能改为手动升级; 由于上述操作报错改为手动修改模式,将之前原项目src和package.json里面的依赖全部拷贝到新项目然后执行npm install先安装第三方依赖; 4. iOS原生端升级4.1 拷贝iOS原生文件 将iOS原生代码和Podfile依赖拷贝到对应位置,然后iOS执行pod install操作;此时有可能依赖的第三方组件会报一下错误: 4.2 修改并保存第三方库文件 将iOS第三方包*.podspec里面的s.dependency ‘React/Core’修改为 s.dependency ‘React-Core’然后再重新执行pod install,记得修改后的第三方内容需要单独拷贝出来不然每次执行npm install后都会被覆盖; 4.3 解决iOS原生端报错 如果静待pod install执行完毕没问题后，运行项目可能还会报以下错误: 直接将node_modules/react/React里面的React.xcodeproj拖入Libraries即可,切记不要将libReact.a也添加到项目中,否则会和pod依赖的React有多个类重复报错; 幸运的话项目应该可以直接跑起来了，但是跑起来后可能还会报以下运行报错: 进入项目目录执行 git bash1npm install --save babel-preset-react-native@5.0.2 4.4 解决js运行报错 解决了上一个问题还可能会报错: 在.babelrc文件添加以下代码 .babelrc1&#123;\"presets\": [\"module:metro-react-native-babel-preset\"]&#125; 然后执行： git bash1npm run start --reset-cache 或者 react-native start --reset-cache 最后模拟器运行不报错了但是真机运行却会崩溃，通过文件引用关系发现之前在js层封装了一个uuid的公共方法，但是rn0.60.4版本却会直接报错，关键是通过仅有的堆栈信息无法得知是uuid的问题，通过修改uuid名字得到解决； 5. Android原生端升级5.1 拷贝Android原生文件 将Android原生代码和app目录下的build.gradle依赖拷贝到对应位置,然后执行sync操作,rn0.60.4依赖的api版本是28，所以可能需要把support包改成AndroidX的引用方式; 5.2 解决Android端原生报错 修改完后build可能会报以下错误：通过点击AndroidManifest.xml=&gt;Merged Manifest,查看error信息解决 6. Android原生端继续报错在app build.gradle我去掉了 annotationProcessor ‘com.github.bumptech.glide:compiler:4.2.0’ 7. 升级后的效果android apk安装包比之前减少了4M左右，内存使用减少了30M左右，页面切换率提高了5～10帧/s","tags":[{"name":"react-native","slug":"react-native","permalink":"http://bozaigao.github.io/tags/react-native/"}]},{"title":"react-native性能优化","date":"2019-09-06T03:02:49.000Z","path":"2019/09/06/react-native性能优化/","text":"react-native log日志新能优化有两种方式第一种是使用babel-plugin-transform-remove-console插件在打包的时候自动去掉所有log信息，但是亲测在rn 0.51.0版本有效在0.60.3版本打包拆包后发现log信息并没有去掉，插件功能失效；第二种则是采用官方的建议 123456789if (!__DEV__) &#123; global.console = &#123; info: () =&gt; &#123;&#125;, log: () =&gt; &#123;&#125;, warn: () =&gt; &#123;&#125;, debug: () =&gt; &#123;&#125;, error: () =&gt; &#123;&#125; &#125;;&#125; 但其实这是不准确的，因为在console里面可能还有其他方法比如console.clear、console.dir、console.profile等，如果在第三方组件里面有用到这些方法调用则会找不到该方法从而导致未知错误，正确的处理方法如下： 123456789101112if (!__DEV__) &#123; global.console.info = () =&gt; &#123; &#125;; global.console.log = () =&gt; &#123; &#125;; global.console.warn = () =&gt; &#123; &#125;; global.console.debug = () =&gt; &#123; &#125;; global.console.error = () =&gt; &#123; &#125;; &#125;","tags":[{"name":"react-native","slug":"react-native","permalink":"http://bozaigao.github.io/tags/react-native/"},{"name":"性能优化","slug":"性能优化","permalink":"http://bozaigao.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"}]}]