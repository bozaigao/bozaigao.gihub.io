[{"title":"react-native热更新服务搭建","date":"2019-11-20T02:39:04.000Z","path":"2019/11/20/react-native热更新服务搭建/","text":"前言为了实现react-native项目的版本增量静默更新需求，需要使用热更新服务，之前用过微软的code-push更新服务，但是由于微软的Azure服务器是在国外，国内访问网速慢且不稳定，于是需要在公司阿里云的ECS上搭建自己的热更新服务. 热更新服务下载与文件修改 下载地址:https://github.com/lisong/code-push-server 然后主要是修改config/config.js 文件里里面的热更新包储存路径和下载基地址,最后将代码通过能够过ftp或者scp命令上传到服务端. config.js12345678910111213141516171819 db: &#123; username: process.env.RDS_USERNAME || \"root\", password: process.env.RDS_PASSWORD || null, database: process.env.DATA_BASE || \"codepush\", host: process.env.RDS_HOST || \"127.0.0.1\", port: process.env.RDS_PORT || 3306, dialect: \"mysql\", logging: false, operatorsAliases: false, &#125;, ...local: &#123; // Binary files storage dir, Do not use tmpdir and it's public download dir. storageDir: process.env.STORAGE_DIR || \"/codepush\", // Binary files download host address which Code Push Server listen to. the files storage in storageDir. downloadUrl: process.env.LOCAL_DOWNLOAD_URL || \"http://your_server_addrss:3000/download\", // public static download spacename. public: '/download' &#125; 服务端数据库配置 在服务器创建codepush数据库，然后use codepush选择数据库，执行source codepush-all.sql(在code-psuh-server sql目录下) 命令创建数据库表和字段. 启动热更新服务 先确保服务端安装好了node等环境，然后进入code-push-server目录执行npm install安装第三方依赖. 执行npm install -g forever安装forever插件，在项目目录执行 forever start ./bin/www来持久化热更新服务 forever作为node服务的守护进程，可以自动重启node服务，保证服务稳定运行","tags":[{"name":"热更新","slug":"热更新","permalink":"http://bozaigao.github.io/tags/%E7%83%AD%E6%9B%B4%E6%96%B0/"},{"name":"code-push-server","slug":"code-push-server","permalink":"http://bozaigao.github.io/tags/code-push-server/"}]},{"title":"使用阿里云ECS结合Shadowsocks搭建自己的专属翻墙梯子(Mac环境搭建)","date":"2019-11-07T08:10:04.000Z","path":"2019/11/07/使用阿里云ECS结合Shadowsocks搭建自己的专属翻墙梯子/","text":"前言 之前一用过Netfits、EasySSR、VyprVPN等一些第三方付费服务翻墙软件，但是自从国内政府严打VPN后陆陆续续翻墙的一些服务出现连接慢、网络延迟高、甚至服务直接不可用等状态，但是作为一名搞it的经常翻看国外技术文章的码农来说怎么能没有一款趁手的科学上网工具呢，由于第三方服务经常因为政策原因而变得不稳定，于是决定自己搭建一个翻墙工具。 1. 服务器端配置1.1 境外服务器或ECS(只要不在大陆就可以了，阿里云、腾讯云、aws等云服务商都提供此类服务，我自己购买的是阿里云香港的服务器) 如果服务器只是用来翻墙查下资料或者部署下个人博客的话选择最低配的，带宽选1M的足够使用。 1.2 服务端安装python版本的Shadowsocks 先安装pip git bash12curl \"https://bootstrap.pypa.io/get-pip.py\" -o \"get-pip.py\"python get-pip.py 再通过pip安装Shadowsocks git bash12pip install --upgrade pippip install shadowsocks 创建Shadowsocks配置文件 12vi /etc/shadowsocks.jsonvi shadowsocks.json 配置文件内容如下： shadowsocks.json123456789&#123; \"server\":\"0.0.0.0\", --服务器IP，直接用0.0.0.0 \"server_port\":8888, --端口端口 \"local_address\": \"127.0.0.1\", --本地地址 \"local_port\":1080, --本地端口 \"password\":\"password\", --密码 \"timeout\":300, --超时时间 \"method\":\"aes-256-cfb\", --加密策略，有多重策略，具体自查&#125; 如果你想配置多个登录账号，可以进行如下配置： shadowsocks.json12345678910111213&#123; \"server\":\"0.0.0.0\", --服务器IP，直接用0.0.0.0 \"port_password\":&#123; \"8381\": \"password1\", \"8382\": \"password2\", \"8383\": \"password3\", \"8384\": \"password4\" &#125;, \"local_address\": \"127.0.0.1\", --本地地址 \"local_port\":1080, --本地端口 \"timeout\":300, --超时时间 \"method\":\"aes-256-cfb\", --加密策略，有多重策略，具体自查&#125; 注意：如果取成系统端口会导致服务启动失败 端口号一定不要随便取，如果取成了系统端口比如443会导致端口被占用从而导致服务启动失败 1.3 启动Shadowsocks服务 123456#启动ssserver -c /etc/shadowsocks.json -d start#停止ssserver -c /etc/shadowsocks.json -d stop#重启ssserver -c /etc/shadowsocks.json -d restart 如果发现Shadowsocks客户端一直连不上请到/var/log/shadowsocks.log查看服务报错日志，根据报错信息解决问题. 1.4 阿里云配置服务器安全入网策略 出网策略不用配置，安全组出方向默认允许所有访问，即从安全组内ECS访问外部都是放行的。 2. 本地电脑客户端配置2.1 Shadowsocks客户端下载 下载地址：https://github.com/shadowsocks/ShadowsocksX-NG/releases/ 2.2 安装压缩文件中直接就是Mac的app程序，解压后移动到Mac程序目录即可； 2.3 配置 3. 翻墙效果 Shadowsocks有PAC模式和全局模式:PAC模式：也就是智能分流模式，根据规则去匹配你访问的网站，国外网站走代理，国内网站不走代理；全局模式：国内、国外所有网站都走代理；我一般默认开PAC模式，这样加载国内网站速度会比较快，遇到网站加载很慢再开全局模式进行访问。","tags":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://bozaigao.github.io/tags/Shadowsocks/"},{"name":"VPN","slug":"VPN","permalink":"http://bozaigao.github.io/tags/VPN/"},{"name":"翻墙","slug":"翻墙","permalink":"http://bozaigao.github.io/tags/%E7%BF%BB%E5%A2%99/"}]},{"title":"react-native版本升级","date":"2019-09-07T01:57:33.000Z","path":"2019/09/07/react-native版本升级/","text":"1. rn版本从0.51.0升级到0.60.4升级目的：rn从0.60.2引入了Hermes 新的js引擎，新的引擎从字节码预编译、无JIT、新的垃圾回收策略等优化了Android端apk大小，减少了内存使用，页面切换的帧率也比之前有了提高,本次分享的主题主要是解决在版本升级过程中遇到的问题。 2. 准备工作项目备份,初始化0.64.0版本的对应项目,保证初始化新项目iOS pod install、android 在target=0.28.0 clean rebuild正常运行,确保环境版本没问题,有问题的话直接查询react-native issue保证项目纯净，能正常运行; 3. js项目端升级 按照官方建议升级步骤,进入要升级的项目先执行react-native-git-upgare脚本自动升级命令,执行该命令会自动覆盖文件,一定记得要备份原项目,然后静静地等待升级完成,如果无法识别该命令,请先执行npm install react-native-git-upgare -g,结果升级中途报错无奈只能改为手动升级; 由于上述操作报错改为手动修改模式,将之前原项目src和package.json里面的依赖全部拷贝到新项目然后执行npm install先安装第三方依赖; 4. iOS原生端升级4.1 拷贝iOS原生文件 将iOS原生代码和Podfile依赖拷贝到对应位置,然后iOS执行pod install操作;此时有可能依赖的第三方组件会报一下错误: 4.2 修改并保存第三方库文件 将iOS第三方包*.podspec里面的s.dependency ‘React/Core’修改为 s.dependency ‘React-Core’然后再重新执行pod install,记得修改后的第三方内容需要单独拷贝出来不然每次执行npm install后都会被覆盖; 4.3 解决iOS原生端报错 如果静待pod install执行完毕没问题后，运行项目可能还会报以下错误: 直接将node_modules/react/React里面的React.xcodeproj拖入Libraries即可,切记不要将libReact.a也添加到项目中,否则会和pod依赖的React有多个类重复报错; 幸运的话项目应该可以直接跑起来了，但是跑起来后可能还会报以下运行报错: 进入项目目录执行 git bash1npm install --save babel-preset-react-native@5.0.2 4.4 解决js运行报错 解决了上一个问题还可能会报错: 在.babelrc文件添加以下代码 .babelrc1&#123;\"presets\": [\"module:metro-react-native-babel-preset\"]&#125; 然后执行： git bash1npm run start --reset-cache 或者 react-native start --reset-cache 最后模拟器运行不报错了但是真机运行却会崩溃，通过文件引用关系发现之前在js层封装了一个uuid的公共方法，但是rn0.60.4版本却会直接报错，关键是通过仅有的堆栈信息无法得知是uuid的问题，通过修改uuid名字得到解决； 5. Android原生端升级5.1 拷贝Android原生文件 将Android原生代码和app目录下的build.gradle依赖拷贝到对应位置,然后执行sync操作,rn0.60.4依赖的api版本是28，所以可能需要把support包改成AndroidX的引用方式; 5.2 解决Android端原生报错 修改完后build可能会报以下错误：通过点击AndroidManifest.xml=&gt;Merged Manifest,查看error信息解决 6. Android原生端继续报错在app build.gradle我去掉了 annotationProcessor ‘com.github.bumptech.glide:compiler:4.2.0’ 7. 升级后的效果android apk安装包比之前减少了4M左右，内存使用减少了30M左右，页面切换率提高了5～10帧/s","tags":[{"name":"react-native","slug":"react-native","permalink":"http://bozaigao.github.io/tags/react-native/"}]},{"title":"react-native性能优化","date":"2019-09-06T03:02:49.000Z","path":"2019/09/06/react-native性能优化/","text":"react-native log日志新能优化有两种方式第一种是使用babel-plugin-transform-remove-console插件在打包的时候自动去掉所有log信息，但是亲测在rn 0.51.0版本有效在0.60.3版本打包拆包后发现log信息并没有去掉，插件功能失效；第二种则是采用官方的建议 123456789if (!__DEV__) &#123; global.console = &#123; info: () =&gt; &#123;&#125;, log: () =&gt; &#123;&#125;, warn: () =&gt; &#123;&#125;, debug: () =&gt; &#123;&#125;, error: () =&gt; &#123;&#125; &#125;;&#125; 但其实这是不准确的，因为在console里面可能还有其他方法比如console.clear、console.dir、console.profile等，如果在第三方组件里面有用到这些方法调用则会找不到该方法从而导致未知错误，正确的处理方法如下： 123456789101112if (!__DEV__) &#123; global.console.info = () =&gt; &#123; &#125;; global.console.log = () =&gt; &#123; &#125;; global.console.warn = () =&gt; &#123; &#125;; global.console.debug = () =&gt; &#123; &#125;; global.console.error = () =&gt; &#123; &#125;; &#125;","tags":[{"name":"react-native","slug":"react-native","permalink":"http://bozaigao.github.io/tags/react-native/"},{"name":"性能优化","slug":"性能优化","permalink":"http://bozaigao.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"}]}]