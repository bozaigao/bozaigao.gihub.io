<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>自律则自由</title>
  
  <subtitle>仰望星空的同时不忘脚踏实地</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bozaigao.github.io/"/>
  <updated>2019-11-07T08:00:36.223Z</updated>
  <id>http://bozaigao.github.io/</id>
  
  <author>
    <name>何晏波</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react-native版本升级</title>
    <link href="http://bozaigao.github.io/2019/09/07/react-native%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <id>http://bozaigao.github.io/2019/09/07/react-native版本升级/</id>
    <published>2019-09-07T01:57:33.000Z</published>
    <updated>2019-11-07T08:00:36.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-rn版本从0-51-0升级到0-60-4"><a href="#1-rn版本从0-51-0升级到0-60-4" class="headerlink" title="1. rn版本从0.51.0升级到0.60.4"></a>1. rn版本从0.51.0升级到0.60.4</h3><p>升级目的：rn从0.60.2引入了<strong>Hermes</strong> 新的js引擎，新的引擎从<code>字节码预编译</code>、<code>无JIT</code>、<code>新的垃圾回收策略</code>等优化了Android端apk大小，减少了内存使用，页面切换的帧率也比之前有了提高,本次分享的主题主要是解决在版本升级过程中遇到的问题。</p><h3 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h3><p>项目备份,初始化0.64.0版本的对应项目,保证初始化新项目iOS pod install、android 在target=0.28.0 clean rebuild正常运行,确保环境版本没问题,有问题的话直接查询react-native issue保证项目纯净，能正常运行;</p><h3 id="3-js项目端升级"><a href="#3-js项目端升级" class="headerlink" title="3. js项目端升级"></a>3. js项目端升级</h3><p> 按照官方建议升级步骤,进入要升级的项目先执行react-native-git-upgare脚本自动升级命令,执行该命令会自动覆盖文件,一定记得要备份原项目,然后静静地等待升级完成,如果无法识别该命令,请先执行npm install react-native-git-upgare -g,<br>结果升级中途报错无奈只能改为手动升级;</p><p><img src="/assets/src_1.png" alt="js脚本升级报错"></p><blockquote><p>由于上述操作报错改为手动修改模式,将之前原项目src和package.json里面的依赖全部拷贝到新项目然后执行npm install先安装第三方依赖;</p></blockquote><h3 id="4-iOS原生端升级"><a href="#4-iOS原生端升级" class="headerlink" title="4. iOS原生端升级"></a>4. iOS原生端升级</h3><h4 id="4-1-拷贝iOS原生文件"><a href="#4-1-拷贝iOS原生文件" class="headerlink" title="4.1 拷贝iOS原生文件"></a>4.1 拷贝iOS原生文件</h4><p> 将iOS原生代码和Podfile依赖拷贝到对应位置,然后iOS执行pod install操作;此时有可能依赖的第三方组件会报一下错误:<br><img src="/assets/iOS_1.png" alt="iOS第三方组件依赖报错"></p><h4 id="4-2-修改并保存第三方库文件"><a href="#4-2-修改并保存第三方库文件" class="headerlink" title="4.2 修改并保存第三方库文件"></a>4.2 修改并保存第三方库文件</h4><p> 将iOS第三方包*.podspec里面的s.dependency ‘React/Core’修改为 s.dependency ‘React-Core’然后再重新执行pod install,记得修改后的第三方内容需要单独拷贝出来不然每次执行npm install后都会被覆盖;</p><h4 id="4-3-解决iOS原生端报错"><a href="#4-3-解决iOS原生端报错" class="headerlink" title="4.3 解决iOS原生端报错"></a>4.3 解决iOS原生端报错</h4><p> 如果静待pod install执行完毕没问题后，运行项目可能还会报以下错误:<br><img src="/assets/iOS_2.png" alt="iOS第三方组件依赖报错"><br> 直接将node_modules/react/React里面的React.xcodeproj拖入Libraries即可,切记不要将libReact.a也添加到项目中,否则会和pod依赖的React有多个类重复报错;<br> 幸运的话项目应该可以直接跑起来了，但是跑起来后可能还会报以下运行报错:<br><img src="/assets/iOS_3.png" alt="iOS第三方组件依赖报错"></p><p> 进入项目目录执行</p><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save babel-preset-react-native@5.0.2</span><br></pre></td></tr></table></figure><h4 id="4-4-解决js运行报错"><a href="#4-4-解决js运行报错" class="headerlink" title="4.4 解决js运行报错"></a>4.4 解决js运行报错</h4><p> 解决了上一个问题还可能会报错:<br><img src="/assets/iOS_4.png" alt="iOS第三方组件依赖报错"></p><p> 在.babelrc文件添加以下代码</p><figure class="highlight javascript"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"presets"</span>: [<span class="string">"module:metro-react-native-babel-preset"</span>]&#125;</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start --reset-cache 或者 react-native start --reset-cache</span><br></pre></td></tr></table></figure><p> 最后模拟器运行不报错了但是真机运行却会崩溃，通过文件引用关系发现之前在js层封装了一个uuid的公共方法，但是rn0.60.4版本却会直接报错，关键是通过仅有的堆栈信息无法得知是uuid的问题，<br>通过修改uuid名字得到解决；<br><img src="/assets/iOS_5.png" alt="iOS第三方组件依赖报错"></p><h3 id="5-Android原生端升级"><a href="#5-Android原生端升级" class="headerlink" title="5. Android原生端升级"></a>5. Android原生端升级</h3><h4 id="5-1-拷贝Android原生文件"><a href="#5-1-拷贝Android原生文件" class="headerlink" title="5.1 拷贝Android原生文件"></a>5.1 拷贝Android原生文件</h4><p> 将Android原生代码和app目录下的build.gradle依赖拷贝到对应位置,然后执行sync操作,rn0.60.4依赖的api版本是28，所以可能需要把support包改成AndroidX的引用方式;</p><h4 id="5-2-解决Android端原生报错"><a href="#5-2-解决Android端原生报错" class="headerlink" title="5.2 解决Android端原生报错"></a>5.2 解决Android端原生报错</h4><p> 修改完后build可能会报以下错误：<br><img src="/assets/Android_1.png" alt="Android报错"><br>通过点击AndroidManifest.xml=&gt;Merged Manifest,查看error信息解决<br><img src="/assets/Android_2.png" alt="Android报错"></p><h3 id="6-Android原生端继续报错"><a href="#6-Android原生端继续报错" class="headerlink" title="6. Android原生端继续报错"></a>6. Android原生端继续报错</h3><p><img src="/assets/Android_3.png" alt="Android报错"><br>在app build.gradle我去掉了 annotationProcessor ‘com.github.bumptech.glide:compiler:4.2.0’</p><h3 id="7-升级后的效果"><a href="#7-升级后的效果" class="headerlink" title="7. 升级后的效果"></a>7. 升级后的效果</h3><p>android apk安装包比之前减少了4M左右，内存使用减少了30M左右，页面切换率提高了5～10帧/s<br><img src="/assets/Android_4.png" alt="Android报错"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-rn版本从0-51-0升级到0-60-4&quot;&gt;&lt;a href=&quot;#1-rn版本从0-51-0升级到0-60-4&quot; class=&quot;headerlink&quot; title=&quot;1. rn版本从0.51.0升级到0.60.4&quot;&gt;&lt;/a&gt;1. rn版本从0.51.0升级到0.
      
    
    </summary>
    
    
      <category term="react-native" scheme="http://bozaigao.github.io/categories/react-native/"/>
    
    
      <category term="react-native" scheme="http://bozaigao.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>react-native性能优化</title>
    <link href="http://bozaigao.github.io/2019/09/06/react-native%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://bozaigao.github.io/2019/09/06/react-native性能优化/</id>
    <published>2019-09-06T03:02:49.000Z</published>
    <updated>2019-11-07T03:06:35.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="react-native-log日志新能优化有两种方式"><a href="#react-native-log日志新能优化有两种方式" class="headerlink" title="react-native log日志新能优化有两种方式"></a>react-native log日志新能优化有两种方式</h3><p>第一种是使用babel-plugin-transform-remove-console插件在打包的时候自动去掉所有log信息，但是亲测在rn 0.51.0版本有效在0.60.3版本打包拆包后发现log信息并没有去掉，插件功能失效；<br>第二种则是采用官方的建议</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!__DEV__) &#123;</span><br><span class="line">  global.console = &#123;</span><br><span class="line">    info: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    log: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    warn: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    debug: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    error: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但其实这是不准确的，因为在console里面可能还有其他方法比如console.clear、console.dir、console.profile等，如果在第三方组件里面有用到这些方法调用则会找不到该方法从而导致未知错误，正确的处理方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!__DEV__) &#123;</span><br><span class="line">            global.console.info = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;;</span><br><span class="line">            global.console.log = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;;</span><br><span class="line">            global.console.warn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;;</span><br><span class="line">            global.console.debug = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;;</span><br><span class="line">            global.console.error = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;react-native-log日志新能优化有两种方式&quot;&gt;&lt;a href=&quot;#react-native-log日志新能优化有两种方式&quot; class=&quot;headerlink&quot; title=&quot;react-native log日志新能优化有两种方式&quot;&gt;&lt;/a&gt;react
      
    
    </summary>
    
    
      <category term="react-native" scheme="http://bozaigao.github.io/categories/react-native/"/>
    
    
      <category term="react-native" scheme="http://bozaigao.github.io/tags/react-native/"/>
    
      <category term="性能优化" scheme="http://bozaigao.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
