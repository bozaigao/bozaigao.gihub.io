[{"title":"react-native版本升级","date":"2019-09-07T01:57:33.000Z","path":"2019/09/07/react-native版本升级/","text":"1. rn版本从0.51.0升级到0.60.4升级目的：rn从0.60.3引入了Hermes 新的js引擎，新的引擎从字节码预编译、无JIT、新的垃圾回收策略等优化了Android端apk大小，减少了内存使用，页面切换的帧率也比之前有了提高,本次分享的主题主要是解决在版本升级过程中遇到的问题。 2. 准备工作项目备份,初始化0.64.0版本的对应项目,保证初始化新项目iOS pod install、android 在target=0.28.0 clean rebuild正常运行,确保环境版本没问题,有问题的话直接查询react-native issue保证项目纯净，能正常运行; 3. js项目端升级 按照官方建议升级步骤,进入要升级的项目先执行react-native-git-upgare脚本自动升级命令,执行该命令会自动覆盖文件,一定记得要备份原项目,然后静静地等待升级完成,如果无法识别该命令,请先执行npm install react-native-git-upgare -g,结果升级中途报错无奈只能改为手动升级; 由于上述操作报错改为手动修改模式,将之前原项目src和package.json里面的依赖全部拷贝到新项目然后执行npm install先安装第三方依赖; 4. iOS原生端升级4.1 拷贝iOS原生文件 将iOS原生代码和Podfile依赖拷贝到对应位置,然后iOS执行pod install操作;此时有可能依赖的第三方组件会报一下错误: 4.2 修改并保存第三方库文件 将iOS第三方包*.podspec里面的s.dependency ‘React/Core’修改为 s.dependency ‘React-Core’然后再重新执行pod install,记得修改后的第三方内容需要单独拷贝出来不然每次执行npm install后都会被覆盖; 4.3 解决iOS原生端报错 如果静待pod install执行完毕没问题后，运行项目可能还会报以下错误: 直接将node_modules/react/React里面的React.xcodeproj拖入Libraries即可,切记不要将libReact.a也添加到项目中,否则会和pod依赖的React有多个类重复报错; 幸运的话项目应该可以直接跑起来了，但是跑起来后可能还会报以下运行报错: 进入项目目录执行 git bash1npm install --save babel-preset-react-native@5.0.2 4.4 解决js运行报错 解决了上一个问题还可能会报错: 在.babelrc文件添加以下代码 .babelrc1&#123;\"presets\": [\"module:metro-react-native-babel-preset\"]&#125; 然后执行： git bash1npm run start --reset-cache 或者 react-native start --reset-cache 最后模拟器运行不报错了但是真机运行却会崩溃，通过文件引用关系发现之前在js层封装了一个uuid的公共方法，但是rn0.60.4版本却会直接报错，关键是通过仅有的堆栈信息无法得知是uuid的问题，通过修改uuid名字得到解决； 5. Android原生端升级5.1 拷贝Android原生文件 将Android原生代码和app目录下的build.gradle依赖拷贝到对应位置,然后执行sync操作,rn0.60.4依赖的api版本是28，所以可能需要把support包改成AndroidX的引用方式; 5.2 解决Android端原生报错 修改完后build可能会报以下错误：通过点击AndroidManifest.xml=&gt;Merged Manifest,查看error信息解决 6. Android原生端继续报错在app build.gradle我去掉了 annotationProcessor ‘com.github.bumptech.glide:compiler:4.2.0’ 7. 升级后的效果android apk安装包比之前减少了4M左右，内存使用减少了30M左右，页面切换率提高了5～10帧/s","tags":[{"name":"react-native","slug":"react-native","permalink":"http://bozaigao.github.io/tags/react-native/"}]}]