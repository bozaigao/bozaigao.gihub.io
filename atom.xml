<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>自律则自由</title>
  
  <subtitle>仰望星空的同时不忘脚踏实地</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bozaigao.github.io/"/>
  <updated>2019-12-30T04:00:08.397Z</updated>
  <id>http://bozaigao.github.io/</id>
  
  <author>
    <name>何晏波</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>github上能找到的taro适配Android、iOS、微信小程序、H5最佳实践项目脚手架</title>
    <link href="http://bozaigao.github.io/2019/12/30/github%E4%B8%8A%E8%83%BD%E6%89%BE%E5%88%B0%E7%9A%84taro%E9%80%82%E9%85%8DAndroid%E3%80%81iOS%E3%80%81%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%81H5%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>http://bozaigao.github.io/2019/12/30/github上能找到的taro适配Android、iOS、微信小程序、H5最佳实践项目脚手架/</id>
    <published>2019-12-30T03:55:17.000Z</published>
    <updated>2019-12-30T04:00:08.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Taro-demo"><a href="#Taro-demo" class="headerlink" title="Taro-demo"></a>Taro-demo</h1><p>github上能找到的taro适配Android、iOS、微信小程序、H5最佳实践,主要涉及到了基础网络请求的封装、适配了多端的SafeArea安全区域、style工具样式引用替换scss的繁琐写法大幅度简化代码,同时解决了scss样式无法通过className进行属性传递的问题、自定义tabBar、全局模态对话框展示(解决了微信小程序端不能覆盖底部tabBar的问题)、展示了相同组件多端适配引用的方式、多端样式布局通过styleAssign注入flex、column、relative的方式实现统一化、演示了app的消息通信,通过mock数据在本地搭建服务进行前后端分离开发、本脚手架各端适配的比较完美适合用来进行全新项目的多端开发,后续基础组件持续完善中,目标是打造一个多端共用的基础组件库.</p><h3 id="适配进度"><a href="#适配进度" class="headerlink" title="适配进度"></a>适配进度</h3><ul><li><input checked="" disabled="" type="checkbox"> H5 – 完美适配</li><li><input checked="" disabled="" type="checkbox"> React Native – 完美适配</li><li><input checked="" disabled="" type="checkbox"> 微信小程序 – 完美适配</li></ul><h3 id="目标功能"><a href="#目标功能" class="headerlink" title="目标功能"></a>目标功能</h3><ul><li><input disabled="" type="checkbox"> 打造一个多端共用的基础组件库 – 持续开发完善中</li></ul><h3 id="样式转化"><a href="#样式转化" class="headerlink" title="样式转化"></a>样式转化</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home__search__top</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: flex;</span><br><span class="line"> <span class="attribute">flex-direction</span>: row;</span><br><span class="line"> <span class="attribute">align-items</span>: center;</span><br><span class="line"> <span class="attribute">background</span>: white;</span><br><span class="line"> <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上述scss写法替换为以下写法,简化布局代码,同时解决了scss样式无法通过className进行属性传递的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style=&#123;styleAssign([styles.udr,styles.uac,bgColor(<span class="string">'white'</span>),ml(<span class="number">20</span>),mr(<span class="number">20</span>)]&#125;</span><br></pre></td></tr></table></figure><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p>typescript+eslint+redux+taro+react-native+mock</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>直接clone本项目进入项目根目录执行npm install操作,然后将third_changes对应目录里面的修改项替换项目根目录node_modules里面对应的组件,react-native原生端壳子<a href="https://github.com/bozaigao/Taro-demo-rn-shell" target="_blank" rel="noopener">Taro-demo-rn-shell</a>.<br>更多官方组件使用请移步<a href="https://taro-docs.jd.com" target="_blank" rel="noopener">京东Taro官方文档</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/qywx-dev.html" target="_blank" rel="noopener">微信小程序官方文档</a></p><ul><li>先打开本地mock服务命令:npm run mock</li><li>rn端运行命令:npm run dev:rm</li><li>h5端运行命令:npm run dev:h5</li><li>微信小程序端运行命令:npm run dev:weapp</li></ul><h3 id="多端适配效果图"><a href="#多端适配效果图" class="headerlink" title="多端适配效果图"></a>多端适配效果图</h3><p><img src="/assets/taro_1.jpeg" alt="效果图1"></p><p><img src="/assets/taro_2.jpeg" alt="效果图1"></p><p><img src="/assets/taro_3.jpeg" alt="效果图1"></p><p><img src="/assets/taro_4.jpeg" alt="效果图1"></p><blockquote><p>项目地址:<a href="https://github.com/bozaigao/Taro-demo" target="_blank" rel="noopener">https://github.com/bozaigao/Taro-demo</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Taro-demo&quot;&gt;&lt;a href=&quot;#Taro-demo&quot; class=&quot;headerlink&quot; title=&quot;Taro-demo&quot;&gt;&lt;/a&gt;Taro-demo&lt;/h1&gt;&lt;p&gt;github上能找到的taro适配Android、iOS、微信小程序、H5最佳实践,
      
    
    </summary>
    
    
      <category term="react-native、大前端、Taro、微信小程序、H5" scheme="http://bozaigao.github.io/categories/react-native%E3%80%81%E5%A4%A7%E5%89%8D%E7%AB%AF%E3%80%81Taro%E3%80%81%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%81H5/"/>
    
    
      <category term="react-native、大前端、Taro、微信小程序、H5" scheme="http://bozaigao.github.io/tags/react-native%E3%80%81%E5%A4%A7%E5%89%8D%E7%AB%AF%E3%80%81Taro%E3%80%81%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%81H5/"/>
    
  </entry>
  
  <entry>
    <title>解决Flutter项目运行报library not found for -libstdc++.6.0.9问题</title>
    <link href="http://bozaigao.github.io/2019/12/30/%E8%A7%A3%E5%86%B3Flutter%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E6%8A%A5library-not-found-for-libstdc-6-0-9%E9%97%AE%E9%A2%98/"/>
    <id>http://bozaigao.github.io/2019/12/30/解决Flutter项目运行报library-not-found-for-libstdc-6-0-9问题/</id>
    <published>2019-12-30T03:39:22.000Z</published>
    <updated>2019-12-30T03:49:11.812Z</updated>
    
    <content type="html"><![CDATA[<p>在运行Flutter项目的时候由于里面第三方库引用了libstdc++.6.0.9这个库文件而导致项目运行报错问题，苹果在XCode10和iOS12中移除了libstdc++这个库，由libc++这个库取而代之，<br>苹果的解释是libstdc++已经标记为废弃有5年了，建议大家使用经过了llvm优化过并且全面支持C++11的libc++库。</p><blockquote><p>临时解决方法:将-libstdc++.6.0.9库文件导入xcode库文件，两个位置，一套是模拟器的，一套是设备的<br>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS12.0.sdk/usr/lib/<br>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib/<br>-libstdc++.6.0.9下载地址:<a href="https://www.bozaigao.net/assets/libstdc++.6.0.9.tbd" target="_blank" rel="noopener">https://www.bozaigao.net/assets/libstdc++.6.0.9.tbd</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在运行Flutter项目的时候由于里面第三方库引用了libstdc++.6.0.9这个库文件而导致项目运行报错问题，苹果在XCode10和iOS12中移除了libstdc++这个库，由libc++这个库取而代之，&lt;br&gt;苹果的解释是libstdc++已经标记为废弃有5年了，
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://bozaigao.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://bozaigao.github.io/tags/Flutter/"/>
    
      <category term="libstdc++.6.0.9" scheme="http://bozaigao.github.io/tags/libstdc-6-0-9/"/>
    
  </entry>
  
  <entry>
    <title>react-native使用chrome调试WebView</title>
    <link href="http://bozaigao.github.io/2019/12/25/react-native%E4%BD%BF%E7%94%A8chrome%E8%B0%83%E8%AF%95WebView/"/>
    <id>http://bozaigao.github.io/2019/12/25/react-native使用chrome调试WebView/</id>
    <published>2019-12-25T00:31:29.000Z</published>
    <updated>2019-12-25T00:48:51.059Z</updated>
    
    <content type="html"><![CDATA[<h4 id="react-native使用chrome调试WebView"><a href="#react-native使用chrome调试WebView" class="headerlink" title="react-native使用chrome调试WebView"></a>react-native使用chrome调试WebView</h4><ul><li><p>如果使用的是google模拟器则直接在chrome浏览器输入:chrome://inspect直接进行调试，如果是Android真机则需要去chrome应用商店安装ADB Plugin插件；<br><img src="/assets/webview_debug1.png" alt=""><br><img src="/assets/webview_debug2.jpeg" alt=""><br><img src="/assets/webview_debug3.jpeg" alt=""><br><img src="/assets/webview_debug4.jpeg" alt=""><br><img src="/assets/webview_debug5.jpeg" alt=""><br><img src="/assets/webview_debug6.jpeg" alt=""></p><blockquote><p>chrome应用商店下载插件需要翻墙，搭建教程：<a href="http://bozaigao.github.io/2019/11/07/使用阿里云ECS结合Shadowsocks搭建自己的专属翻墙梯子/">http://bozaigao.github.io/2019/11/07/使用阿里云ECS结合Shadowsocks搭建自己的专属翻墙梯子/</a></p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;react-native使用chrome调试WebView&quot;&gt;&lt;a href=&quot;#react-native使用chrome调试WebView&quot; class=&quot;headerlink&quot; title=&quot;react-native使用chrome调试WebView&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="react-native" scheme="http://bozaigao.github.io/categories/react-native/"/>
    
    
      <category term="react-native" scheme="http://bozaigao.github.io/tags/react-native/"/>
    
      <category term="性能优化" scheme="http://bozaigao.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>react-native热更新服务搭建</title>
    <link href="http://bozaigao.github.io/2019/11/20/react-native%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <id>http://bozaigao.github.io/2019/11/20/react-native热更新服务搭建/</id>
    <published>2019-11-20T02:39:04.000Z</published>
    <updated>2019-11-20T08:03:49.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为了实现react-native项目的版本增量静默更新需求，需要使用热更新服务，之前用过微软的code-push更新服务，但是由于微软的Azure服务器是在国外，国内访问网速慢且不稳定，于是需要在公司阿里云的ECS上搭建自己的热更新服务.</p><h4 id="热更新服务下载与文件修改"><a href="#热更新服务下载与文件修改" class="headerlink" title="热更新服务下载与文件修改"></a>热更新服务下载与文件修改</h4><p> 下载地址:<a href="https://github.com/lisong/code-push-server" target="_blank" rel="noopener">https://github.com/lisong/code-push-server</a><br> 然后主要是修改config/config.js 文件里里面的热更新包储存路径和下载基地址,最后将代码通过能够过ftp或者scp命令上传到服务端.<br> <figure class="highlight js"><figcaption><span>config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> db: &#123;</span><br><span class="line">    username: process.env.RDS_USERNAME || <span class="string">"root"</span>,</span><br><span class="line">    password: process.env.RDS_PASSWORD || <span class="literal">null</span>,</span><br><span class="line">    database: process.env.DATA_BASE || <span class="string">"codepush"</span>,</span><br><span class="line">    host: process.env.RDS_HOST || <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    port: process.env.RDS_PORT || <span class="number">3306</span>,</span><br><span class="line">    dialect: <span class="string">"mysql"</span>,</span><br><span class="line">    logging: <span class="literal">false</span>,</span><br><span class="line">    operatorsAliases: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">local: &#123;</span><br><span class="line">    <span class="comment">// Binary files storage dir, Do not use tmpdir and it's public download dir.</span></span><br><span class="line">    storageDir: process.env.STORAGE_DIR || <span class="string">"/codepush"</span>,</span><br><span class="line">    <span class="comment">// Binary files download host address which Code Push Server listen to. the files storage in storageDir.</span></span><br><span class="line">    downloadUrl: process.env.LOCAL_DOWNLOAD_URL || <span class="string">"http://your_server_addrss:3000/download"</span>,</span><br><span class="line">    <span class="comment">// public static download spacename.</span></span><br><span class="line">    public: <span class="string">'/download'</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="服务端数据库配置"><a href="#服务端数据库配置" class="headerlink" title="服务端数据库配置"></a>服务端数据库配置</h4><p> 在服务器创建codepush数据库，然后use codepush选择数据库，执行source codepush-all.sql(在code-psuh-server sql目录下) 命令创建数据库表和字段.</p><h4 id="启动热更新服务"><a href="#启动热更新服务" class="headerlink" title="启动热更新服务"></a>启动热更新服务</h4><ul><li><p>先确保服务端安装好了node等环境，然后进入code-push-server目录执行npm install安装第三方依赖.</p></li><li><p>执行npm install -g forever安装forever插件，在项目目录执行 forever start ./bin/www来持久化热更新服务</p><blockquote><p>forever作为node服务的守护进程，可以自动重启node服务，保证服务稳定运行</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;为了实现react-native项目的版本增量静默更新需求，需要使用热更新服务，之前用过微软的code-push更新服务，但是由于微软的Az
      
    
    </summary>
    
    
      <category term="热更新" scheme="http://bozaigao.github.io/categories/%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    
    
      <category term="热更新" scheme="http://bozaigao.github.io/tags/%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    
      <category term="code-push-server" scheme="http://bozaigao.github.io/tags/code-push-server/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里云ECS结合Shadowsocks搭建自己的专属翻墙梯子(Mac和iphone环境搭建)</title>
    <link href="http://bozaigao.github.io/2019/11/07/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91ECS%E7%BB%93%E5%90%88Shadowsocks%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%93%E5%B1%9E%E7%BF%BB%E5%A2%99%E6%A2%AF%E5%AD%90/"/>
    <id>http://bozaigao.github.io/2019/11/07/使用阿里云ECS结合Shadowsocks搭建自己的专属翻墙梯子/</id>
    <published>2019-11-07T08:10:04.000Z</published>
    <updated>2019-11-22T03:40:04.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 之前一用过Netfits、EasySSR、VyprVPN等一些第三方付费服务翻墙软件，但是自从国内政府严打VPN后陆陆续续翻墙的一些服务出现连接慢、网络延迟高、甚至服务直接不可用等状态，但是作为一名搞it的经常翻看国外技术文章的码农来说怎么能没有一款趁手的科学上网工具呢，由于第三方服务经常因为政策原因而变得不稳定，于是决定自己搭建一个翻墙工具。</p><h3 id="1-服务器端配置"><a href="#1-服务器端配置" class="headerlink" title="1. 服务器端配置"></a>1. 服务器端配置</h3><h4 id="1-1-境外服务器或ECS-只要不在大陆就可以了，阿里云、腾讯云、aws等云服务商都提供此类服务，我自己购买的是阿里云香港的服务器"><a href="#1-1-境外服务器或ECS-只要不在大陆就可以了，阿里云、腾讯云、aws等云服务商都提供此类服务，我自己购买的是阿里云香港的服务器" class="headerlink" title="1.1 境外服务器或ECS(只要不在大陆就可以了，阿里云、腾讯云、aws等云服务商都提供此类服务，我自己购买的是阿里云香港的服务器)"></a>1.1 境外服务器或ECS(只要不在大陆就可以了，阿里云、腾讯云、aws等云服务商都提供此类服务，我自己购买的是阿里云香港的服务器)</h4><p> 如果服务器只是用来翻墙查下资料或者部署下个人博客的话选择最低配的，带宽选1M的足够使用。<br> <img src="/assets/Shadowsocks1.1.jpg" alt=""></p><h4 id="1-2-服务端安装python版本的Shadowsocks"><a href="#1-2-服务端安装python版本的Shadowsocks" class="headerlink" title="1.2 服务端安装python版本的Shadowsocks"></a>1.2 服务端安装python版本的Shadowsocks</h4><ul><li><p>先安装pip</p><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">"https://bootstrap.pypa.io/get-pip.py"</span> -o <span class="string">"get-pip.py"</span></span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure></li><li><p>再通过pip安装Shadowsocks</p><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure></li><li><p>创建Shadowsocks配置文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br><span class="line">vi shadowsocks.json</span><br></pre></td></tr></table></figure><p> 配置文件内容如下：<br> <figure class="highlight"><figcaption><span>shadowsocks.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> "server":"0.0.0.0",      --服务器IP，直接用0.0.0.0</span><br><span class="line"> "server_port":8888,      --端口端口</span><br><span class="line"> "local_address": "127.0.0.1", --本地地址</span><br><span class="line"> "local_port":1080,       --本地端口</span><br><span class="line"> "password":"password",     --密码</span><br><span class="line"> "timeout":300,         --超时时间</span><br><span class="line"> "method":"aes-256-cfb",    --加密策略，有多重策略，具体自查</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  如果你想配置多个登录账号，可以进行如下配置：</p><figure class="highlight"><figcaption><span>shadowsocks.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "server":"0.0.0.0",      --服务器IP，直接用0.0.0.0</span><br><span class="line">    "port_password":&#123;</span><br><span class="line">    "8381": "password1",</span><br><span class="line">    "8382": "password2",</span><br><span class="line">         "8383": "password3",</span><br><span class="line">        "8384": "password4"</span><br><span class="line">    &#125;,</span><br><span class="line">    "local_address": "127.0.0.1", --本地地址</span><br><span class="line">    "local_port":1080,       --本地端口</span><br><span class="line">    "timeout":300,         --超时时间</span><br><span class="line">    "method":"aes-256-cfb",    --加密策略，有多重策略，具体自查</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>注意：</strong>如果取成系统端口会导致服务启动失败<br>  <img src="/assets/port_busy.jpg" alt=""></p><blockquote><p>端口号一定不要随便取，如果取成了系统端口比如443会导致端口被占用从而导致服务启动失败</p></blockquote><h4 id="1-3-启动Shadowsocks服务"><a href="#1-3-启动Shadowsocks服务" class="headerlink" title="1.3 启动Shadowsocks服务"></a>1.3 启动Shadowsocks服务</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">ssserver -c /etc/shadowsocks.json -d restart</span><br></pre></td></tr></table></figure><blockquote><p>如果发现Shadowsocks客户端一直连不上请到/var/log/shadowsocks.log查看服务报错日志，根据报错信息解决问题.</p></blockquote><h4 id="1-4-阿里云配置服务器安全入网策略"><a href="#1-4-阿里云配置服务器安全入网策略" class="headerlink" title="1.4 阿里云配置服务器安全入网策略"></a>1.4 阿里云配置服务器安全入网策略</h4><p> <img src="/assets/ruwang_celue.jpg" alt=""></p><blockquote><p>出网策略不用配置，安全组出方向默认允许所有访问，即从安全组内ECS访问外部都是放行的。</p></blockquote><h3 id="2-本地电脑客户端配置"><a href="#2-本地电脑客户端配置" class="headerlink" title="2. 本地电脑客户端配置"></a>2. 本地电脑客户端配置</h3><h4 id="2-1-Shadowsocks客户端下载"><a href="#2-1-Shadowsocks客户端下载" class="headerlink" title="2.1 Shadowsocks客户端下载"></a>2.1 Shadowsocks客户端下载</h4><p> 下载地址：<a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases/" target="_blank" rel="noopener">https://github.com/shadowsocks/ShadowsocksX-NG/releases/</a><br> <img src="/assets/Shadowsocks.jpg" alt=""></p><h4 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h4><p>压缩文件中直接就是Mac的app程序，解压后移动到Mac程序目录即可；</p><h4 id="2-3-配置"><a href="#2-3-配置" class="headerlink" title="2.3 配置"></a>2.3 配置</h4><p> <img src="/assets/peizhi.jpeg" alt=""><br> <img src="/assets/peizhi2.jpg" alt=""></p><h3 id="3-翻墙效果"><a href="#3-翻墙效果" class="headerlink" title="3. 翻墙效果"></a>3. 翻墙效果</h3><p> <img src="/assets/enjoy.jpg" alt=""></p><blockquote><p>Shadowsocks有PAC模式和全局模式:<br>PAC模式：也就是智能分流模式，根据规则去匹配你访问的网站，国外网站走代理，国内网站不走代理；<br>全局模式：国内、国外所有网站都走代理；<br>我一般默认开PAC模式，这样加载国内网站速度会比较快，遇到网站加载很慢再开全局模式进行访问。<br><strong>注意</strong>：如果服务运行一段时间突然发现翻不了墙了，可能是阿里云那边做了限制，重新配置新的端口安全策略再重启Shadowsocks服务即可。</p></blockquote><h3 id="4-iphone安装Shadowrocket"><a href="#4-iphone安装Shadowrocket" class="headerlink" title="4. iphone安装Shadowrocket"></a>4. iphone安装Shadowrocket</h3><p>appstore中国区由于政策原因已经下架，直接登录美区账号搜索下载<br><strong>账号:<a href="mailto:4ssgit@Gmail.com" target="_blank" rel="noopener">4ssgit@Gmail.com</a>   密码:V2Server</strong><br>如果登录失败请参考以下链接:<a href="https://shadowsockshelp.github.io/Shadowsocks/appleid.html" target="_blank" rel="noopener">https://shadowsockshelp.github.io/Shadowsocks/appleid.html</a><br>进入Shadowrocket主界面后在首页点击添加服务器节点然后输入ip、端口号、加密方式和连接密码即可，配置以及登录twitter效果如下：<br><img src="/assets/Shadowrocket1.jpeg" alt="">  <img src="/assets/Shadowrocket2.png" alt="">  <img src="/assets/Shadowrocket3.png" alt=""></p><blockquote><p><strong>切记一定不要登录iCloud账号只需要登录appstore账号就可以了，不然手机被账号拥有者恶意锁定的话就无法解锁了。</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt; 之前一用过Netfits、EasySSR、VyprVPN等一些第三方付费服务翻墙软件，但是自从国内政府严打VPN后陆陆续续翻墙的一些服务出
      
    
    </summary>
    
    
      <category term="翻墙" scheme="http://bozaigao.github.io/categories/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="工具" scheme="http://bozaigao.github.io/categories/%E7%BF%BB%E5%A2%99/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="VPN" scheme="http://bozaigao.github.io/categories/%E7%BF%BB%E5%A2%99/%E5%B7%A5%E5%85%B7/VPN/"/>
    
    
      <category term="Shadowsocks" scheme="http://bozaigao.github.io/tags/Shadowsocks/"/>
    
      <category term="VPN" scheme="http://bozaigao.github.io/tags/VPN/"/>
    
      <category term="翻墙" scheme="http://bozaigao.github.io/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>react-native版本升级</title>
    <link href="http://bozaigao.github.io/2019/09/07/react-native%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <id>http://bozaigao.github.io/2019/09/07/react-native版本升级/</id>
    <published>2019-09-07T01:57:33.000Z</published>
    <updated>2019-11-07T08:08:28.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-rn版本从0-51-0升级到0-60-4"><a href="#1-rn版本从0-51-0升级到0-60-4" class="headerlink" title="1. rn版本从0.51.0升级到0.60.4"></a>1. rn版本从0.51.0升级到0.60.4</h3><p>升级目的：rn从0.60.2引入了<strong>Hermes</strong> 新的js引擎，新的引擎从<code>字节码预编译</code>、<code>无JIT</code>、<code>新的垃圾回收策略</code>等优化了Android端apk大小，减少了内存使用，页面切换的帧率也比之前有了提高,本次分享的主题主要是解决在版本升级过程中遇到的问题。</p><h3 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h3><p>项目备份,初始化0.64.0版本的对应项目,保证初始化新项目iOS pod install、android 在target=0.28.0 clean rebuild正常运行,确保环境版本没问题,有问题的话直接查询react-native issue保证项目纯净，能正常运行;</p><h3 id="3-js项目端升级"><a href="#3-js项目端升级" class="headerlink" title="3. js项目端升级"></a>3. js项目端升级</h3><p> 按照官方建议升级步骤,进入要升级的项目先执行react-native-git-upgare脚本自动升级命令,执行该命令会自动覆盖文件,一定记得要备份原项目,然后静静地等待升级完成,如果无法识别该命令,请先执行npm install react-native-git-upgare -g,<br>结果升级中途报错无奈只能改为手动升级;</p><p><img src="/assets/src_1.png" alt="js脚本升级报错"></p><blockquote><p>由于上述操作报错改为手动修改模式,将之前原项目src和package.json里面的依赖全部拷贝到新项目然后执行npm install先安装第三方依赖;</p></blockquote><h3 id="4-iOS原生端升级"><a href="#4-iOS原生端升级" class="headerlink" title="4. iOS原生端升级"></a>4. iOS原生端升级</h3><h4 id="4-1-拷贝iOS原生文件"><a href="#4-1-拷贝iOS原生文件" class="headerlink" title="4.1 拷贝iOS原生文件"></a>4.1 拷贝iOS原生文件</h4><p> 将iOS原生代码和Podfile依赖拷贝到对应位置,然后iOS执行pod install操作;此时有可能依赖的第三方组件会报一下错误:<br><img src="/assets/iOS_1.png" alt="iOS第三方组件依赖报错"></p><h4 id="4-2-修改并保存第三方库文件"><a href="#4-2-修改并保存第三方库文件" class="headerlink" title="4.2 修改并保存第三方库文件"></a>4.2 修改并保存第三方库文件</h4><p> 将iOS第三方包*.podspec里面的s.dependency ‘React/Core’修改为 s.dependency ‘React-Core’然后再重新执行pod install,记得修改后的第三方内容需要单独拷贝出来不然每次执行npm install后都会被覆盖;</p><h4 id="4-3-解决iOS原生端报错"><a href="#4-3-解决iOS原生端报错" class="headerlink" title="4.3 解决iOS原生端报错"></a>4.3 解决iOS原生端报错</h4><p> 如果静待pod install执行完毕没问题后，运行项目可能还会报以下错误:<br><img src="/assets/iOS_2.png" alt="iOS第三方组件依赖报错"><br> 直接将node_modules/react/React里面的React.xcodeproj拖入Libraries即可,切记不要将libReact.a也添加到项目中,否则会和pod依赖的React有多个类重复报错;<br> 幸运的话项目应该可以直接跑起来了，但是跑起来后可能还会报以下运行报错:<br><img src="/assets/iOS_3.png" alt="iOS第三方组件依赖报错"></p><p> 进入项目目录执行</p><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save babel-preset-react-native@5.0.2</span><br></pre></td></tr></table></figure><h4 id="4-4-解决js运行报错"><a href="#4-4-解决js运行报错" class="headerlink" title="4.4 解决js运行报错"></a>4.4 解决js运行报错</h4><p> 解决了上一个问题还可能会报错:<br><img src="/assets/iOS_4.png" alt="iOS第三方组件依赖报错"></p><p> 在.babelrc文件添加以下代码</p><figure class="highlight javascript"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"presets"</span>: [<span class="string">"module:metro-react-native-babel-preset"</span>]&#125;</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start --reset-cache 或者 react-native start --reset-cache</span><br></pre></td></tr></table></figure><p> 最后模拟器运行不报错了但是真机运行却会崩溃，通过文件引用关系发现之前在js层封装了一个uuid的公共方法，但是rn0.60.4版本却会直接报错，关键是通过仅有的堆栈信息无法得知是uuid的问题，<br>通过修改uuid名字得到解决；<br><img src="/assets/iOS_5.png" alt="iOS第三方组件依赖报错"></p><h3 id="5-Android原生端升级"><a href="#5-Android原生端升级" class="headerlink" title="5. Android原生端升级"></a>5. Android原生端升级</h3><h4 id="5-1-拷贝Android原生文件"><a href="#5-1-拷贝Android原生文件" class="headerlink" title="5.1 拷贝Android原生文件"></a>5.1 拷贝Android原生文件</h4><p> 将Android原生代码和app目录下的build.gradle依赖拷贝到对应位置,然后执行sync操作,rn0.60.4依赖的api版本是28，所以可能需要把support包改成AndroidX的引用方式;</p><h4 id="5-2-解决Android端原生报错"><a href="#5-2-解决Android端原生报错" class="headerlink" title="5.2 解决Android端原生报错"></a>5.2 解决Android端原生报错</h4><p> 修改完后build可能会报以下错误：<br><img src="/assets/Android_1.png" alt="Android报错"><br>通过点击AndroidManifest.xml=&gt;Merged Manifest,查看error信息解决<br><img src="/assets/Android_2.png" alt="Android报错"></p><h3 id="6-Android原生端继续报错"><a href="#6-Android原生端继续报错" class="headerlink" title="6. Android原生端继续报错"></a>6. Android原生端继续报错</h3><p><img src="/assets/Android_3.png" alt="Android报错"><br>在app build.gradle我去掉了 annotationProcessor ‘com.github.bumptech.glide:compiler:4.2.0’</p><h3 id="7-升级后的效果"><a href="#7-升级后的效果" class="headerlink" title="7. 升级后的效果"></a>7. 升级后的效果</h3><p>android apk安装包比之前减少了4M左右，内存使用减少了30M左右，页面切换率提高了5～10帧/s<br><img src="/assets/Android_4.png" alt="Android报错"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-rn版本从0-51-0升级到0-60-4&quot;&gt;&lt;a href=&quot;#1-rn版本从0-51-0升级到0-60-4&quot; class=&quot;headerlink&quot; title=&quot;1. rn版本从0.51.0升级到0.60.4&quot;&gt;&lt;/a&gt;1. rn版本从0.51.0升级到0.
      
    
    </summary>
    
    
      <category term="react-native" scheme="http://bozaigao.github.io/categories/react-native/"/>
    
    
      <category term="react-native" scheme="http://bozaigao.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>react-native性能优化</title>
    <link href="http://bozaigao.github.io/2019/09/06/react-native%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://bozaigao.github.io/2019/09/06/react-native性能优化/</id>
    <published>2019-09-06T03:02:49.000Z</published>
    <updated>2019-11-07T03:06:35.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="react-native-log日志新能优化有两种方式"><a href="#react-native-log日志新能优化有两种方式" class="headerlink" title="react-native log日志新能优化有两种方式"></a>react-native log日志新能优化有两种方式</h3><p>第一种是使用babel-plugin-transform-remove-console插件在打包的时候自动去掉所有log信息，但是亲测在rn 0.51.0版本有效在0.60.3版本打包拆包后发现log信息并没有去掉，插件功能失效；<br>第二种则是采用官方的建议</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!__DEV__) &#123;</span><br><span class="line">  global.console = &#123;</span><br><span class="line">    info: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    log: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    warn: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    debug: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    error: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但其实这是不准确的，因为在console里面可能还有其他方法比如console.clear、console.dir、console.profile等，如果在第三方组件里面有用到这些方法调用则会找不到该方法从而导致未知错误，正确的处理方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!__DEV__) &#123;</span><br><span class="line">            global.console.info = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;;</span><br><span class="line">            global.console.log = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;;</span><br><span class="line">            global.console.warn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;;</span><br><span class="line">            global.console.debug = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;;</span><br><span class="line">            global.console.error = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;react-native-log日志新能优化有两种方式&quot;&gt;&lt;a href=&quot;#react-native-log日志新能优化有两种方式&quot; class=&quot;headerlink&quot; title=&quot;react-native log日志新能优化有两种方式&quot;&gt;&lt;/a&gt;react
      
    
    </summary>
    
    
      <category term="react-native" scheme="http://bozaigao.github.io/categories/react-native/"/>
    
    
      <category term="react-native" scheme="http://bozaigao.github.io/tags/react-native/"/>
    
      <category term="性能优化" scheme="http://bozaigao.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
